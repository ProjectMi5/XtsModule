<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="MNG_UPDATEIOS" Id="{41cf061c-f1da-4f21-90f7-e3524aee021b}">
    <Declaration><![CDATA[FUNCTION_BLOCK MNG_UpdateIOs
(* This function block implements simple TCP/IP client protocol.              *)
(* The max. size of binary tx/rx data has to be <= PLCPRJ_BUFFER_SIZE         *)
VAR_IN_OUT
    Outputs : MNG_Application_Outputs_32Bit;    (* Tx user data *)
END_VAR

VAR_INPUT
    bDbg        : BOOL                         := FALSE               ; (* TRUE => Enable debug output, FALSE => Disable debug output *)
    sRemoteHost : STRING(15)                   := '127.0.0.1'         ; (* IP address of remote server *)	
    nRemotePort : UDINT                        := 5000                ; (* Remote server port *)
    bEnable     : BOOL                         := FALSE               ; (* TRUE => Enable/connect, FALSE => Disable/disconnect *)
    tReconnect  : TIME                         := T#5s                ;
END_VAR

VAR_OUTPUT
    errors      : FB_LogFifo                                          ; (* Error message fifo *)
    Inputs      : MNG_Application_Inputs_32Bit                        ; (* Rx user data *)
    eState      : E_SocketConnectionState      := eSOCKET_DISCONNECTED; (* TCP/IP connection state *)
END_VAR

VAR
    counter          : DWORD                        := 0                   ;
    fbConnect        : FB_ClientServerConnection    := (tReconnect := T#5s); (* Create/release TCP/IP connection *)
    fbSend           : FB_SocketSend                                       ; (* Send TCP/IP data *)
    fbReceive        : FB_SocketReceive                                    ; (* Receive TCP/IP data *)
    state            : BYTE                                                ; (* Global state *)
    tx_state         : BYTE                                                ; (* Tx state *)
    rx_state         : BYTE                                                ; (* Rx state *)

    toServer         : MNG_RawDatagram                                     ;
    fromServer       : MNG_RawDatagram                                     ;
    cbReceived       : UDINT                                               ; (* Count of received data bytes *)
    cbRx             : UDINT                                               ; (* Rx frame byte size *)

    bDisconnect      : BOOL                                                ; (* Disconnect flag, if set the socket will be closed *)
    pollTimer        : TON                                                 ; (* Rx data poll timer *)
    bAbort           : BOOL                                                ; (* Flag to abort frame parsing loop *)
    sID              : STRING(20)                   := ''                  ;
    clock            : FB_LocalSystemTime           := ( bEnable := TRUE ) ; (* OS clock *)
    _byteCount       : DWORD                                               ;
    _i               : DWORD                                               ;
    _ptr             : POINTER TO BYTE                                     ;
    _internalInputs  : MNG_Application_Inputs_32Bit                        ;
    DWordBuffer      : DWORD                                               ; (* convert DWORD data *)
    DIntBuffer       : DINT                                                ; (* convert DINT data *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* refresh clock time                                                         *)
clock();

(* state chart                                                                *)
CASE state OF
    0:(* Init state *)
        (*rx.A_Reset(bDbg := bDbg)  ; (* Reset RX fifo (optional) *)
        tx.A_Reset    (bDbg := bDbg); (* Reset TX fifo (optional) *)*)
        errors.Clear(); (* Reset error fifo (optional) *)

        pollTimer( IN := FALSE, PT := PLCPRJ_RECEIVER_POLLING_CYCLE_TIME );
        bDisconnect := FALSE;(* Reset disconnect flag *)
        cbReceived  := 0;(* Reset number of received data bytes *)
        tx_state    := 0;(* Reset tx state machine *)
        rx_state    := 0;(* Reset rx state machine *)
        state       := 1;(* Go to the next step *)

    1:(* Create TCP/IP connection *)
        fbConnect(sSrvNetID := '',
                  nMode := CONNECT_MODE_ENABLEDBG,(* Enable debug output *)
                  sRemoteHost := sRemoteHost,
                  nRemotePort := nRemotePort,
                  tReconnect  := tReconnect,
                  bEnable     := bEnable,
                  eState      => eState);
        IF NOT fbConnect.bBusy THEN

            (* Create identification string used by debug messages *)
            sID          := CONCAT(CONCAT('[', DWORD_TO_HEXSTR(fbConnect.hSocket.handle, 4, FALSE) ), ']');
            errors.sMessage := CONCAT('CLI.Err', sID);

            IF NOT fbConnect.bError THEN
                IF eState = eSOCKET_CONNECTED THEN(* we are connected *)
                    state := 2;
                END_IF
            ELSE(* connect error: log error *)
                errors.Error(nErrId := fbConnect.nErrId);
            END_IF
        END_IF

    2:(* Data exchange state *)
        bDisconnect := NOT bEnable OR bDisconnect; (* user/internal disconnect requested? *)
        IF bDisconnect AND (tx_state = 0) AND (rx_state = 0) THEN
            state := 3;(* disconnect *)
        ELSE
            (*--------------------------- Send tx data -------------------------------------------*)
            CASE tx_state OF
                0:
                    IF NOT bDisconnect THEN

                        (* forcefully send data each cycle *)

                        (* create the raw datagram *)
                        _byteCount                   := 892;
                        toServer.Header.ByteCount    := HOST_TO_BE32(in := _byteCount);
                        toServer.Header.DatagramType := HOST_TO_BE32(in := MNG_Raw32BitImage);
                        toServer.Header.Counter      := Counter;

                        toServer.Payload[1] := HOST_TO_BE32(222); (* number of signals *)

                        (* FLOAT32 Fahrachse1_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse1_00_ChainDrvActual), n := 4);
                        toServer.Payload[2] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_1_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_1_00_ACT_POS), n := 4);
                        toServer.Payload[3] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder1_00_Priority *)
                        toServer.Payload[4] := HOST_TO_BE32(Outputs.Cocktail_Holder1_00_Priority);

                        (* BOOL Cocktail_Holder1_00_GRIP *)
                        IF Outputs.Cocktail_Holder1_00_GRIP THEN
                            toServer.Payload[5] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[5] := 0;
                        END_IF;

                        (* FLOAT32 Fahrachse2_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse2_00_ChainDrvActual), n := 4);
                        toServer.Payload[6] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_2_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_2_00_ACT_POS), n := 4);
                        toServer.Payload[7] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder2_00_Priority *)
                        toServer.Payload[8] := HOST_TO_BE32(Outputs.Cocktail_Holder2_00_Priority);

                        (* BOOL Cocktail_Holder2_00_GRIP *)
                        IF Outputs.Cocktail_Holder2_00_GRIP THEN
                            toServer.Payload[9] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[9] := 0;
                        END_IF;

                        (* FLOAT32 Fahrachse3_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse3_00_ChainDrvActual), n := 4);
                        toServer.Payload[10] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_3_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_3_00_ACT_POS), n := 4);
                        toServer.Payload[11] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder3_00_Priority *)
                        toServer.Payload[12] := HOST_TO_BE32(Outputs.Cocktail_Holder3_00_Priority);

                        (* BOOL Cocktail_Holder3_00_GRIP *)
                        IF Outputs.Cocktail_Holder3_00_GRIP THEN
                            toServer.Payload[13] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[13] := 0;
                        END_IF;

                        (* FLOAT32 Fahrachse4_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse4_00_ChainDrvActual), n := 4);
                        toServer.Payload[14] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_4_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_4_00_ACT_POS), n := 4);
                        toServer.Payload[15] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder4_00_Priority *)
                        toServer.Payload[16] := HOST_TO_BE32(Outputs.Cocktail_Holder4_00_Priority);

                        (* BOOL Cocktail_Holder4_00_GRIP *)
                        IF Outputs.Cocktail_Holder4_00_GRIP THEN
                            toServer.Payload[17] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[17] := 0;
                        END_IF;

                        (* FLOAT32 Fahrachse5_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse5_00_ChainDrvActual), n := 4);
                        toServer.Payload[18] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_5_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_5_00_ACT_POS), n := 4);
                        toServer.Payload[19] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder5_00_Priority *)
                        toServer.Payload[20] := HOST_TO_BE32(Outputs.Cocktail_Holder5_00_Priority);

                        (* BOOL Cocktail_Holder5_00_GRIP *)
                        IF Outputs.Cocktail_Holder5_00_GRIP THEN
                            toServer.Payload[21] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[21] := 0;
                        END_IF;

                        (* FLOAT32 Fahrachse6_00_ChainDrvActual *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Fahrachse6_00_ChainDrvActual), n := 4);
                        toServer.Payload[22] := HOST_TO_BE32(DWordBuffer);

                        (* FLOAT32 Cocktail_Holder_6_00_ACT_POS *)
                        MEMCPY(destAddr := ADR(DWordBuffer), srcAddr := ADR(Outputs.Cocktail_Holder_6_00_ACT_POS), n := 4);
                        toServer.Payload[23] := HOST_TO_BE32(DWordBuffer);

                        (* UINT32 Cocktail_Holder6_00_Priority *)
                        toServer.Payload[24] := HOST_TO_BE32(Outputs.Cocktail_Holder6_00_Priority);

                        (* BOOL Cocktail_Holder6_00_GRIP *)
                        IF Outputs.Cocktail_Holder6_00_GRIP THEN
                            toServer.Payload[25] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[25] := 0;
                        END_IF;

                        (* BOOL LED_2_65_00_on1 *)
                        IF Outputs.LED_2_65_00_on1 THEN
                            toServer.Payload[26] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[26] := 0;
                        END_IF;

                        (* BOOL LED_2_65_00_on2 *)
                        IF Outputs.LED_2_65_00_on2 THEN
                            toServer.Payload[27] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[27] := 0;
                        END_IF;

                        (* BOOL LED_2_65_00_on3 *)
                        IF Outputs.LED_2_65_00_on3 THEN
                            toServer.Payload[28] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[28] := 0;
                        END_IF;

                        (* BOOL LED_2_60_00_on1 *)
                        IF Outputs.LED_2_60_00_on1 THEN
                            toServer.Payload[29] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[29] := 0;
                        END_IF;

                        (* BOOL LED_2_60_00_on2 *)
                        IF Outputs.LED_2_60_00_on2 THEN
                            toServer.Payload[30] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[30] := 0;
                        END_IF;

                        (* BOOL LED_2_60_00_on3 *)
                        IF Outputs.LED_2_60_00_on3 THEN
                            toServer.Payload[31] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[31] := 0;
                        END_IF;

                        (* BOOL LED_3_05_00_on1 *)
                        IF Outputs.LED_3_05_00_on1 THEN
                            toServer.Payload[32] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[32] := 0;
                        END_IF;

                        (* BOOL LED_3_05_00_on2 *)
                        IF Outputs.LED_3_05_00_on2 THEN
                            toServer.Payload[33] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[33] := 0;
                        END_IF;

                        (* BOOL LED_3_05_00_on3 *)
                        IF Outputs.LED_3_05_00_on3 THEN
                            toServer.Payload[34] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[34] := 0;
                        END_IF;

                        (* BOOL LED_2_50_00_on1 *)
                        IF Outputs.LED_2_50_00_on1 THEN
                            toServer.Payload[35] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[35] := 0;
                        END_IF;

                        (* BOOL LED_2_50_00_on2 *)
                        IF Outputs.LED_2_50_00_on2 THEN
                            toServer.Payload[36] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[36] := 0;
                        END_IF;

                        (* BOOL LED_2_50_00_on3 *)
                        IF Outputs.LED_2_50_00_on3 THEN
                            toServer.Payload[37] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[37] := 0;
                        END_IF;

                        (* BOOL LED_2_55_00_on1 *)
                        IF Outputs.LED_2_55_00_on1 THEN
                            toServer.Payload[38] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[38] := 0;
                        END_IF;

                        (* BOOL LED_2_55_00_on2 *)
                        IF Outputs.LED_2_55_00_on2 THEN
                            toServer.Payload[39] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[39] := 0;
                        END_IF;

                        (* BOOL LED_2_55_00_on3 *)
                        IF Outputs.LED_2_55_00_on3 THEN
                            toServer.Payload[40] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[40] := 0;
                        END_IF;

                        (* BOOL LED_3_00_00_on1 *)
                        IF Outputs.LED_3_00_00_on1 THEN
                            toServer.Payload[41] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[41] := 0;
                        END_IF;

                        (* BOOL LED_3_00_00_on2 *)
                        IF Outputs.LED_3_00_00_on2 THEN
                            toServer.Payload[42] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[42] := 0;
                        END_IF;

                        (* BOOL LED_3_00_00_on3 *)
                        IF Outputs.LED_3_00_00_on3 THEN
                            toServer.Payload[43] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[43] := 0;
                        END_IF;

                        (* BOOL LED_2_95_00_on1 *)
                        IF Outputs.LED_2_95_00_on1 THEN
                            toServer.Payload[44] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[44] := 0;
                        END_IF;

                        (* BOOL LED_2_95_00_on2 *)
                        IF Outputs.LED_2_95_00_on2 THEN
                            toServer.Payload[45] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[45] := 0;
                        END_IF;

                        (* BOOL LED_2_95_00_on3 *)
                        IF Outputs.LED_2_95_00_on3 THEN
                            toServer.Payload[46] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[46] := 0;
                        END_IF;

                        (* BOOL LED_2_90_00_on1 *)
                        IF Outputs.LED_2_90_00_on1 THEN
                            toServer.Payload[47] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[47] := 0;
                        END_IF;

                        (* BOOL LED_2_90_00_on2 *)
                        IF Outputs.LED_2_90_00_on2 THEN
                            toServer.Payload[48] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[48] := 0;
                        END_IF;

                        (* BOOL LED_2_90_00_on3 *)
                        IF Outputs.LED_2_90_00_on3 THEN
                            toServer.Payload[49] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[49] := 0;
                        END_IF;

                        (* BOOL LED_2_85_00_on1 *)
                        IF Outputs.LED_2_85_00_on1 THEN
                            toServer.Payload[50] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[50] := 0;
                        END_IF;

                        (* BOOL LED_2_85_00_on2 *)
                        IF Outputs.LED_2_85_00_on2 THEN
                            toServer.Payload[51] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[51] := 0;
                        END_IF;

                        (* BOOL LED_2_85_00_on3 *)
                        IF Outputs.LED_2_85_00_on3 THEN
                            toServer.Payload[52] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[52] := 0;
                        END_IF;

                        (* BOOL LED_2_80_00_on1 *)
                        IF Outputs.LED_2_80_00_on1 THEN
                            toServer.Payload[53] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[53] := 0;
                        END_IF;

                        (* BOOL LED_2_80_00_on2 *)
                        IF Outputs.LED_2_80_00_on2 THEN
                            toServer.Payload[54] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[54] := 0;
                        END_IF;

                        (* BOOL LED_2_80_00_on3 *)
                        IF Outputs.LED_2_80_00_on3 THEN
                            toServer.Payload[55] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[55] := 0;
                        END_IF;

                        (* BOOL LED_2_75_00_on1 *)
                        IF Outputs.LED_2_75_00_on1 THEN
                            toServer.Payload[56] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[56] := 0;
                        END_IF;

                        (* BOOL LED_2_75_00_on2 *)
                        IF Outputs.LED_2_75_00_on2 THEN
                            toServer.Payload[57] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[57] := 0;
                        END_IF;

                        (* BOOL LED_2_75_00_on3 *)
                        IF Outputs.LED_2_75_00_on3 THEN
                            toServer.Payload[58] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[58] := 0;
                        END_IF;

                        (* BOOL LED_2_70_00_on1 *)
                        IF Outputs.LED_2_70_00_on1 THEN
                            toServer.Payload[59] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[59] := 0;
                        END_IF;

                        (* BOOL LED_2_70_00_on2 *)
                        IF Outputs.LED_2_70_00_on2 THEN
                            toServer.Payload[60] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[60] := 0;
                        END_IF;

                        (* BOOL LED_2_70_00_on3 *)
                        IF Outputs.LED_2_70_00_on3 THEN
                            toServer.Payload[61] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[61] := 0;
                        END_IF;

                        (* BOOL LED_3_10_00_on1 *)
                        IF Outputs.LED_3_10_00_on1 THEN
                            toServer.Payload[62] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[62] := 0;
                        END_IF;

                        (* BOOL LED_3_10_00_on2 *)
                        IF Outputs.LED_3_10_00_on2 THEN
                            toServer.Payload[63] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[63] := 0;
                        END_IF;

                        (* BOOL LED_3_10_00_on3 *)
                        IF Outputs.LED_3_10_00_on3 THEN
                            toServer.Payload[64] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[64] := 0;
                        END_IF;

                        (* BOOL LED_3_15_00_on1 *)
                        IF Outputs.LED_3_15_00_on1 THEN
                            toServer.Payload[65] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[65] := 0;
                        END_IF;

                        (* BOOL LED_3_15_00_on2 *)
                        IF Outputs.LED_3_15_00_on2 THEN
                            toServer.Payload[66] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[66] := 0;
                        END_IF;

                        (* BOOL LED_3_15_00_on3 *)
                        IF Outputs.LED_3_15_00_on3 THEN
                            toServer.Payload[67] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[67] := 0;
                        END_IF;

                        (* BOOL LED_3_20_00_on1 *)
                        IF Outputs.LED_3_20_00_on1 THEN
                            toServer.Payload[68] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[68] := 0;
                        END_IF;

                        (* BOOL LED_3_20_00_on2 *)
                        IF Outputs.LED_3_20_00_on2 THEN
                            toServer.Payload[69] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[69] := 0;
                        END_IF;

                        (* BOOL LED_3_20_00_on3 *)
                        IF Outputs.LED_3_20_00_on3 THEN
                            toServer.Payload[70] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[70] := 0;
                        END_IF;

                        (* BOOL LED_3_25_00_on1 *)
                        IF Outputs.LED_3_25_00_on1 THEN
                            toServer.Payload[71] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[71] := 0;
                        END_IF;

                        (* BOOL LED_3_25_00_on2 *)
                        IF Outputs.LED_3_25_00_on2 THEN
                            toServer.Payload[72] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[72] := 0;
                        END_IF;

                        (* BOOL LED_3_25_00_on3 *)
                        IF Outputs.LED_3_25_00_on3 THEN
                            toServer.Payload[73] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[73] := 0;
                        END_IF;

                        (* BOOL LED_3_45_00_on1 *)
                        IF Outputs.LED_3_45_00_on1 THEN
                            toServer.Payload[74] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[74] := 0;
                        END_IF;

                        (* BOOL LED_3_45_00_on2 *)
                        IF Outputs.LED_3_45_00_on2 THEN
                            toServer.Payload[75] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[75] := 0;
                        END_IF;

                        (* BOOL LED_3_45_00_on3 *)
                        IF Outputs.LED_3_45_00_on3 THEN
                            toServer.Payload[76] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[76] := 0;
                        END_IF;

                        (* BOOL LED_3_40_00_on1 *)
                        IF Outputs.LED_3_40_00_on1 THEN
                            toServer.Payload[77] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[77] := 0;
                        END_IF;

                        (* BOOL LED_3_40_00_on2 *)
                        IF Outputs.LED_3_40_00_on2 THEN
                            toServer.Payload[78] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[78] := 0;
                        END_IF;

                        (* BOOL LED_3_40_00_on3 *)
                        IF Outputs.LED_3_40_00_on3 THEN
                            toServer.Payload[79] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[79] := 0;
                        END_IF;

                        (* BOOL LED_2_25_00_on1 *)
                        IF Outputs.LED_2_25_00_on1 THEN
                            toServer.Payload[80] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[80] := 0;
                        END_IF;

                        (* BOOL LED_2_25_00_on2 *)
                        IF Outputs.LED_2_25_00_on2 THEN
                            toServer.Payload[81] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[81] := 0;
                        END_IF;

                        (* BOOL LED_2_25_00_on3 *)
                        IF Outputs.LED_2_25_00_on3 THEN
                            toServer.Payload[82] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[82] := 0;
                        END_IF;

                        (* BOOL LED_2_20_00_on1 *)
                        IF Outputs.LED_2_20_00_on1 THEN
                            toServer.Payload[83] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[83] := 0;
                        END_IF;

                        (* BOOL LED_2_20_00_on2 *)
                        IF Outputs.LED_2_20_00_on2 THEN
                            toServer.Payload[84] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[84] := 0;
                        END_IF;

                        (* BOOL LED_2_20_00_on3 *)
                        IF Outputs.LED_2_20_00_on3 THEN
                            toServer.Payload[85] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[85] := 0;
                        END_IF;

                        (* BOOL LED_2_15_00_on1 *)
                        IF Outputs.LED_2_15_00_on1 THEN
                            toServer.Payload[86] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[86] := 0;
                        END_IF;

                        (* BOOL LED_2_15_00_on2 *)
                        IF Outputs.LED_2_15_00_on2 THEN
                            toServer.Payload[87] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[87] := 0;
                        END_IF;

                        (* BOOL LED_2_15_00_on3 *)
                        IF Outputs.LED_2_15_00_on3 THEN
                            toServer.Payload[88] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[88] := 0;
                        END_IF;

                        (* BOOL LED_2_10_00_on1 *)
                        IF Outputs.LED_2_10_00_on1 THEN
                            toServer.Payload[89] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[89] := 0;
                        END_IF;

                        (* BOOL LED_2_10_00_on2 *)
                        IF Outputs.LED_2_10_00_on2 THEN
                            toServer.Payload[90] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[90] := 0;
                        END_IF;

                        (* BOOL LED_2_10_00_on3 *)
                        IF Outputs.LED_2_10_00_on3 THEN
                            toServer.Payload[91] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[91] := 0;
                        END_IF;

                        (* BOOL LED_2_05_00_on1 *)
                        IF Outputs.LED_2_05_00_on1 THEN
                            toServer.Payload[92] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[92] := 0;
                        END_IF;

                        (* BOOL LED_2_05_00_on2 *)
                        IF Outputs.LED_2_05_00_on2 THEN
                            toServer.Payload[93] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[93] := 0;
                        END_IF;

                        (* BOOL LED_2_05_00_on3 *)
                        IF Outputs.LED_2_05_00_on3 THEN
                            toServer.Payload[94] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[94] := 0;
                        END_IF;

                        (* BOOL LED_2_00_00_on1 *)
                        IF Outputs.LED_2_00_00_on1 THEN
                            toServer.Payload[95] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[95] := 0;
                        END_IF;

                        (* BOOL LED_2_00_00_on2 *)
                        IF Outputs.LED_2_00_00_on2 THEN
                            toServer.Payload[96] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[96] := 0;
                        END_IF;

                        (* BOOL LED_2_00_00_on3 *)
                        IF Outputs.LED_2_00_00_on3 THEN
                            toServer.Payload[97] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[97] := 0;
                        END_IF;

                        (* BOOL LED_3_35_00_on1 *)
                        IF Outputs.LED_3_35_00_on1 THEN
                            toServer.Payload[98] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[98] := 0;
                        END_IF;

                        (* BOOL LED_3_35_00_on2 *)
                        IF Outputs.LED_3_35_00_on2 THEN
                            toServer.Payload[99] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[99] := 0;
                        END_IF;

                        (* BOOL LED_3_35_00_on3 *)
                        IF Outputs.LED_3_35_00_on3 THEN
                            toServer.Payload[100] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[100] := 0;
                        END_IF;

                        (* BOOL LED_3_30_00_on1 *)
                        IF Outputs.LED_3_30_00_on1 THEN
                            toServer.Payload[101] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[101] := 0;
                        END_IF;

                        (* BOOL LED_3_30_00_on2 *)
                        IF Outputs.LED_3_30_00_on2 THEN
                            toServer.Payload[102] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[102] := 0;
                        END_IF;

                        (* BOOL LED_3_30_00_on3 *)
                        IF Outputs.LED_3_30_00_on3 THEN
                            toServer.Payload[103] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[103] := 0;
                        END_IF;

                        (* BOOL LED_2_35_00_on1 *)
                        IF Outputs.LED_2_35_00_on1 THEN
                            toServer.Payload[104] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[104] := 0;
                        END_IF;

                        (* BOOL LED_2_35_00_on2 *)
                        IF Outputs.LED_2_35_00_on2 THEN
                            toServer.Payload[105] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[105] := 0;
                        END_IF;

                        (* BOOL LED_2_35_00_on3 *)
                        IF Outputs.LED_2_35_00_on3 THEN
                            toServer.Payload[106] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[106] := 0;
                        END_IF;

                        (* BOOL LED_2_30_00_on1 *)
                        IF Outputs.LED_2_30_00_on1 THEN
                            toServer.Payload[107] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[107] := 0;
                        END_IF;

                        (* BOOL LED_2_30_00_on2 *)
                        IF Outputs.LED_2_30_00_on2 THEN
                            toServer.Payload[108] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[108] := 0;
                        END_IF;

                        (* BOOL LED_2_30_00_on3 *)
                        IF Outputs.LED_2_30_00_on3 THEN
                            toServer.Payload[109] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[109] := 0;
                        END_IF;

                        (* BOOL LED_2_40_00_on1 *)
                        IF Outputs.LED_2_40_00_on1 THEN
                            toServer.Payload[110] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[110] := 0;
                        END_IF;

                        (* BOOL LED_2_40_00_on2 *)
                        IF Outputs.LED_2_40_00_on2 THEN
                            toServer.Payload[111] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[111] := 0;
                        END_IF;

                        (* BOOL LED_2_40_00_on3 *)
                        IF Outputs.LED_2_40_00_on3 THEN
                            toServer.Payload[112] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[112] := 0;
                        END_IF;

                        (* BOOL LED_2_45_00_on1 *)
                        IF Outputs.LED_2_45_00_on1 THEN
                            toServer.Payload[113] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[113] := 0;
                        END_IF;

                        (* BOOL LED_2_45_00_on2 *)
                        IF Outputs.LED_2_45_00_on2 THEN
                            toServer.Payload[114] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[114] := 0;
                        END_IF;

                        (* BOOL LED_2_45_00_on3 *)
                        IF Outputs.LED_2_45_00_on3 THEN
                            toServer.Payload[115] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[115] := 0;
                        END_IF;

                        (* BOOL LED_0_80_00_on1 *)
                        IF Outputs.LED_0_80_00_on1 THEN
                            toServer.Payload[116] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[116] := 0;
                        END_IF;

                        (* BOOL LED_0_80_00_on2 *)
                        IF Outputs.LED_0_80_00_on2 THEN
                            toServer.Payload[117] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[117] := 0;
                        END_IF;

                        (* BOOL LED_0_80_00_on3 *)
                        IF Outputs.LED_0_80_00_on3 THEN
                            toServer.Payload[118] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[118] := 0;
                        END_IF;

                        (* BOOL LED_0_85_00_on1 *)
                        IF Outputs.LED_0_85_00_on1 THEN
                            toServer.Payload[119] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[119] := 0;
                        END_IF;

                        (* BOOL LED_0_85_00_on2 *)
                        IF Outputs.LED_0_85_00_on2 THEN
                            toServer.Payload[120] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[120] := 0;
                        END_IF;

                        (* BOOL LED_0_85_00_on3 *)
                        IF Outputs.LED_0_85_00_on3 THEN
                            toServer.Payload[121] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[121] := 0;
                        END_IF;

                        (* BOOL LED_0_40_00_on1 *)
                        IF Outputs.LED_0_40_00_on1 THEN
                            toServer.Payload[122] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[122] := 0;
                        END_IF;

                        (* BOOL LED_0_40_00_on2 *)
                        IF Outputs.LED_0_40_00_on2 THEN
                            toServer.Payload[123] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[123] := 0;
                        END_IF;

                        (* BOOL LED_0_40_00_on3 *)
                        IF Outputs.LED_0_40_00_on3 THEN
                            toServer.Payload[124] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[124] := 0;
                        END_IF;

                        (* BOOL LED_0_95_00_on1 *)
                        IF Outputs.LED_0_95_00_on1 THEN
                            toServer.Payload[125] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[125] := 0;
                        END_IF;

                        (* BOOL LED_0_95_00_on2 *)
                        IF Outputs.LED_0_95_00_on2 THEN
                            toServer.Payload[126] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[126] := 0;
                        END_IF;

                        (* BOOL LED_0_95_00_on3 *)
                        IF Outputs.LED_0_95_00_on3 THEN
                            toServer.Payload[127] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[127] := 0;
                        END_IF;

                        (* BOOL LED_0_90_00_on1 *)
                        IF Outputs.LED_0_90_00_on1 THEN
                            toServer.Payload[128] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[128] := 0;
                        END_IF;

                        (* BOOL LED_0_90_00_on2 *)
                        IF Outputs.LED_0_90_00_on2 THEN
                            toServer.Payload[129] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[129] := 0;
                        END_IF;

                        (* BOOL LED_0_90_00_on3 *)
                        IF Outputs.LED_0_90_00_on3 THEN
                            toServer.Payload[130] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[130] := 0;
                        END_IF;

                        (* BOOL LED_0_45_00_on1 *)
                        IF Outputs.LED_0_45_00_on1 THEN
                            toServer.Payload[131] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[131] := 0;
                        END_IF;

                        (* BOOL LED_0_45_00_on2 *)
                        IF Outputs.LED_0_45_00_on2 THEN
                            toServer.Payload[132] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[132] := 0;
                        END_IF;

                        (* BOOL LED_0_45_00_on3 *)
                        IF Outputs.LED_0_45_00_on3 THEN
                            toServer.Payload[133] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[133] := 0;
                        END_IF;

                        (* BOOL LED_0_50_00_on1 *)
                        IF Outputs.LED_0_50_00_on1 THEN
                            toServer.Payload[134] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[134] := 0;
                        END_IF;

                        (* BOOL LED_0_50_00_on2 *)
                        IF Outputs.LED_0_50_00_on2 THEN
                            toServer.Payload[135] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[135] := 0;
                        END_IF;

                        (* BOOL LED_0_50_00_on3 *)
                        IF Outputs.LED_0_50_00_on3 THEN
                            toServer.Payload[136] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[136] := 0;
                        END_IF;

                        (* BOOL LED_0_55_00_on1 *)
                        IF Outputs.LED_0_55_00_on1 THEN
                            toServer.Payload[137] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[137] := 0;
                        END_IF;

                        (* BOOL LED_0_55_00_on2 *)
                        IF Outputs.LED_0_55_00_on2 THEN
                            toServer.Payload[138] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[138] := 0;
                        END_IF;

                        (* BOOL LED_0_55_00_on3 *)
                        IF Outputs.LED_0_55_00_on3 THEN
                            toServer.Payload[139] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[139] := 0;
                        END_IF;

                        (* BOOL LED_0_60_00_on1 *)
                        IF Outputs.LED_0_60_00_on1 THEN
                            toServer.Payload[140] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[140] := 0;
                        END_IF;

                        (* BOOL LED_0_60_00_on2 *)
                        IF Outputs.LED_0_60_00_on2 THEN
                            toServer.Payload[141] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[141] := 0;
                        END_IF;

                        (* BOOL LED_0_60_00_on3 *)
                        IF Outputs.LED_0_60_00_on3 THEN
                            toServer.Payload[142] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[142] := 0;
                        END_IF;

                        (* BOOL LED_0_65_00_on1 *)
                        IF Outputs.LED_0_65_00_on1 THEN
                            toServer.Payload[143] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[143] := 0;
                        END_IF;

                        (* BOOL LED_0_65_00_on2 *)
                        IF Outputs.LED_0_65_00_on2 THEN
                            toServer.Payload[144] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[144] := 0;
                        END_IF;

                        (* BOOL LED_0_65_00_on3 *)
                        IF Outputs.LED_0_65_00_on3 THEN
                            toServer.Payload[145] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[145] := 0;
                        END_IF;

                        (* BOOL LED_0_70_00_on1 *)
                        IF Outputs.LED_0_70_00_on1 THEN
                            toServer.Payload[146] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[146] := 0;
                        END_IF;

                        (* BOOL LED_0_70_00_on2 *)
                        IF Outputs.LED_0_70_00_on2 THEN
                            toServer.Payload[147] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[147] := 0;
                        END_IF;

                        (* BOOL LED_0_70_00_on3 *)
                        IF Outputs.LED_0_70_00_on3 THEN
                            toServer.Payload[148] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[148] := 0;
                        END_IF;

                        (* BOOL LED_0_75_00_on1 *)
                        IF Outputs.LED_0_75_00_on1 THEN
                            toServer.Payload[149] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[149] := 0;
                        END_IF;

                        (* BOOL LED_0_75_00_on2 *)
                        IF Outputs.LED_0_75_00_on2 THEN
                            toServer.Payload[150] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[150] := 0;
                        END_IF;

                        (* BOOL LED_0_75_00_on3 *)
                        IF Outputs.LED_0_75_00_on3 THEN
                            toServer.Payload[151] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[151] := 0;
                        END_IF;

                        (* BOOL LED_0_35_00_on1 *)
                        IF Outputs.LED_0_35_00_on1 THEN
                            toServer.Payload[152] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[152] := 0;
                        END_IF;

                        (* BOOL LED_0_35_00_on2 *)
                        IF Outputs.LED_0_35_00_on2 THEN
                            toServer.Payload[153] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[153] := 0;
                        END_IF;

                        (* BOOL LED_0_35_00_on3 *)
                        IF Outputs.LED_0_35_00_on3 THEN
                            toServer.Payload[154] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[154] := 0;
                        END_IF;

                        (* BOOL LED_0_30_00_on1 *)
                        IF Outputs.LED_0_30_00_on1 THEN
                            toServer.Payload[155] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[155] := 0;
                        END_IF;

                        (* BOOL LED_0_30_00_on2 *)
                        IF Outputs.LED_0_30_00_on2 THEN
                            toServer.Payload[156] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[156] := 0;
                        END_IF;

                        (* BOOL LED_0_30_00_on3 *)
                        IF Outputs.LED_0_30_00_on3 THEN
                            toServer.Payload[157] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[157] := 0;
                        END_IF;

                        (* BOOL LED_0_25_00_on1 *)
                        IF Outputs.LED_0_25_00_on1 THEN
                            toServer.Payload[158] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[158] := 0;
                        END_IF;

                        (* BOOL LED_0_25_00_on2 *)
                        IF Outputs.LED_0_25_00_on2 THEN
                            toServer.Payload[159] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[159] := 0;
                        END_IF;

                        (* BOOL LED_0_25_00_on3 *)
                        IF Outputs.LED_0_25_00_on3 THEN
                            toServer.Payload[160] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[160] := 0;
                        END_IF;

                        (* BOOL LED_0_20_00_on1 *)
                        IF Outputs.LED_0_20_00_on1 THEN
                            toServer.Payload[161] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[161] := 0;
                        END_IF;

                        (* BOOL LED_0_20_00_on2 *)
                        IF Outputs.LED_0_20_00_on2 THEN
                            toServer.Payload[162] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[162] := 0;
                        END_IF;

                        (* BOOL LED_0_20_00_on3 *)
                        IF Outputs.LED_0_20_00_on3 THEN
                            toServer.Payload[163] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[163] := 0;
                        END_IF;

                        (* BOOL LED_0_00_00_on1 *)
                        IF Outputs.LED_0_00_00_on1 THEN
                            toServer.Payload[164] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[164] := 0;
                        END_IF;

                        (* BOOL LED_0_00_00_on2 *)
                        IF Outputs.LED_0_00_00_on2 THEN
                            toServer.Payload[165] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[165] := 0;
                        END_IF;

                        (* BOOL LED_0_00_00_on3 *)
                        IF Outputs.LED_0_00_00_on3 THEN
                            toServer.Payload[166] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[166] := 0;
                        END_IF;

                        (* BOOL LED_0_05_00_on1 *)
                        IF Outputs.LED_0_05_00_on1 THEN
                            toServer.Payload[167] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[167] := 0;
                        END_IF;

                        (* BOOL LED_0_05_00_on2 *)
                        IF Outputs.LED_0_05_00_on2 THEN
                            toServer.Payload[168] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[168] := 0;
                        END_IF;

                        (* BOOL LED_0_05_00_on3 *)
                        IF Outputs.LED_0_05_00_on3 THEN
                            toServer.Payload[169] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[169] := 0;
                        END_IF;

                        (* BOOL LED_1_20_00_on1 *)
                        IF Outputs.LED_1_20_00_on1 THEN
                            toServer.Payload[170] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[170] := 0;
                        END_IF;

                        (* BOOL LED_1_20_00_on2 *)
                        IF Outputs.LED_1_20_00_on2 THEN
                            toServer.Payload[171] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[171] := 0;
                        END_IF;

                        (* BOOL LED_1_20_00_on3 *)
                        IF Outputs.LED_1_20_00_on3 THEN
                            toServer.Payload[172] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[172] := 0;
                        END_IF;

                        (* BOOL LED_1_25_00_on1 *)
                        IF Outputs.LED_1_25_00_on1 THEN
                            toServer.Payload[173] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[173] := 0;
                        END_IF;

                        (* BOOL LED_1_25_00_on2 *)
                        IF Outputs.LED_1_25_00_on2 THEN
                            toServer.Payload[174] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[174] := 0;
                        END_IF;

                        (* BOOL LED_1_25_00_on3 *)
                        IF Outputs.LED_1_25_00_on3 THEN
                            toServer.Payload[175] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[175] := 0;
                        END_IF;

                        (* BOOL LED_1_30_00_on1 *)
                        IF Outputs.LED_1_30_00_on1 THEN
                            toServer.Payload[176] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[176] := 0;
                        END_IF;

                        (* BOOL LED_1_30_00_on2 *)
                        IF Outputs.LED_1_30_00_on2 THEN
                            toServer.Payload[177] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[177] := 0;
                        END_IF;

                        (* BOOL LED_1_30_00_on3 *)
                        IF Outputs.LED_1_30_00_on3 THEN
                            toServer.Payload[178] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[178] := 0;
                        END_IF;

                        (* BOOL LED_1_35_00_on1 *)
                        IF Outputs.LED_1_35_00_on1 THEN
                            toServer.Payload[179] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[179] := 0;
                        END_IF;

                        (* BOOL LED_1_35_00_on2 *)
                        IF Outputs.LED_1_35_00_on2 THEN
                            toServer.Payload[180] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[180] := 0;
                        END_IF;

                        (* BOOL LED_1_35_00_on3 *)
                        IF Outputs.LED_1_35_00_on3 THEN
                            toServer.Payload[181] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[181] := 0;
                        END_IF;

                        (* BOOL LED_1_40_00_on1 *)
                        IF Outputs.LED_1_40_00_on1 THEN
                            toServer.Payload[182] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[182] := 0;
                        END_IF;

                        (* BOOL LED_1_40_00_on2 *)
                        IF Outputs.LED_1_40_00_on2 THEN
                            toServer.Payload[183] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[183] := 0;
                        END_IF;

                        (* BOOL LED_1_40_00_on3 *)
                        IF Outputs.LED_1_40_00_on3 THEN
                            toServer.Payload[184] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[184] := 0;
                        END_IF;

                        (* BOOL LED_1_45_00_on1 *)
                        IF Outputs.LED_1_45_00_on1 THEN
                            toServer.Payload[185] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[185] := 0;
                        END_IF;

                        (* BOOL LED_1_45_00_on2 *)
                        IF Outputs.LED_1_45_00_on2 THEN
                            toServer.Payload[186] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[186] := 0;
                        END_IF;

                        (* BOOL LED_1_45_00_on3 *)
                        IF Outputs.LED_1_45_00_on3 THEN
                            toServer.Payload[187] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[187] := 0;
                        END_IF;

                        (* BOOL LED_0_10_00_on1 *)
                        IF Outputs.LED_0_10_00_on1 THEN
                            toServer.Payload[188] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[188] := 0;
                        END_IF;

                        (* BOOL LED_0_10_00_on2 *)
                        IF Outputs.LED_0_10_00_on2 THEN
                            toServer.Payload[189] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[189] := 0;
                        END_IF;

                        (* BOOL LED_0_10_00_on3 *)
                        IF Outputs.LED_0_10_00_on3 THEN
                            toServer.Payload[190] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[190] := 0;
                        END_IF;

                        (* BOOL LED_0_15_00_on1 *)
                        IF Outputs.LED_0_15_00_on1 THEN
                            toServer.Payload[191] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[191] := 0;
                        END_IF;

                        (* BOOL LED_0_15_00_on2 *)
                        IF Outputs.LED_0_15_00_on2 THEN
                            toServer.Payload[192] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[192] := 0;
                        END_IF;

                        (* BOOL LED_0_15_00_on3 *)
                        IF Outputs.LED_0_15_00_on3 THEN
                            toServer.Payload[193] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[193] := 0;
                        END_IF;

                        (* BOOL LED_1_10_00_on1 *)
                        IF Outputs.LED_1_10_00_on1 THEN
                            toServer.Payload[194] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[194] := 0;
                        END_IF;

                        (* BOOL LED_1_10_00_on2 *)
                        IF Outputs.LED_1_10_00_on2 THEN
                            toServer.Payload[195] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[195] := 0;
                        END_IF;

                        (* BOOL LED_1_10_00_on3 *)
                        IF Outputs.LED_1_10_00_on3 THEN
                            toServer.Payload[196] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[196] := 0;
                        END_IF;

                        (* BOOL LED_1_15_00_on1 *)
                        IF Outputs.LED_1_15_00_on1 THEN
                            toServer.Payload[197] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[197] := 0;
                        END_IF;

                        (* BOOL LED_1_15_00_on2 *)
                        IF Outputs.LED_1_15_00_on2 THEN
                            toServer.Payload[198] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[198] := 0;
                        END_IF;

                        (* BOOL LED_1_15_00_on3 *)
                        IF Outputs.LED_1_15_00_on3 THEN
                            toServer.Payload[199] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[199] := 0;
                        END_IF;

                        (* BOOL LED_1_05_00_on1 *)
                        IF Outputs.LED_1_05_00_on1 THEN
                            toServer.Payload[200] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[200] := 0;
                        END_IF;

                        (* BOOL LED_1_05_00_on2 *)
                        IF Outputs.LED_1_05_00_on2 THEN
                            toServer.Payload[201] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[201] := 0;
                        END_IF;

                        (* BOOL LED_1_05_00_on3 *)
                        IF Outputs.LED_1_05_00_on3 THEN
                            toServer.Payload[202] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[202] := 0;
                        END_IF;

                        (* BOOL LED_1_00_00_on1 *)
                        IF Outputs.LED_1_00_00_on1 THEN
                            toServer.Payload[203] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[203] := 0;
                        END_IF;

                        (* BOOL LED_1_00_00_on2 *)
                        IF Outputs.LED_1_00_00_on2 THEN
                            toServer.Payload[204] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[204] := 0;
                        END_IF;

                        (* BOOL LED_1_00_00_on3 *)
                        IF Outputs.LED_1_00_00_on3 THEN
                            toServer.Payload[205] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[205] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_reserved_colour02 *)
                        IF Outputs.Seitenwand_00_reserved_colour02 THEN
                            toServer.Payload[206] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[206] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_blocked_colour02 *)
                        IF Outputs.Seitenwand_00_blocked_colour02 THEN
                            toServer.Payload[207] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[207] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_error_colour02 *)
                        IF Outputs.Seitenwand_00_error_colour02 THEN
                            toServer.Payload[208] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[208] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_reserved_colour02 *)
                        IF Outputs.Seitenwand0_00_reserved_colour02 THEN
                            toServer.Payload[209] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[209] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_blocked_colour02 *)
                        IF Outputs.Seitenwand0_00_blocked_colour02 THEN
                            toServer.Payload[210] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[210] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_error_colour02 *)
                        IF Outputs.Seitenwand0_00_error_colour02 THEN
                            toServer.Payload[211] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[211] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_reserved_colour03 *)
                        IF Outputs.Seitenwand_00_reserved_colour04 THEN
                            toServer.Payload[212] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[212] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_blocked_colour03 *)
                        IF Outputs.Seitenwand_00_blocked_colour04 THEN
                            toServer.Payload[213] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[213] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_error_colour03 *)
                        IF Outputs.Seitenwand_00_error_colour04 THEN
                            toServer.Payload[214] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[214] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_reserved_colour03 *)
                        IF Outputs.Seitenwand0_00_reserved_colour04 THEN
                            toServer.Payload[215] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[215] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_blocked_colour03 *)
                        IF Outputs.Seitenwand0_00_blocked_colour04 THEN
                            toServer.Payload[216] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[216] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_error_colour03 *)
                        IF Outputs.Seitenwand0_00_error_colour04 THEN
                            toServer.Payload[217] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[217] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_reserved_colour04 *)
                        IF Outputs.Seitenwand_00_reserved_colour06 THEN
                            toServer.Payload[218] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[218] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_blocked_colour04 *)
                        IF Outputs.Seitenwand_00_blocked_colour06 THEN
                            toServer.Payload[219] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[219] := 0;
                        END_IF;

                        (* BOOL Seitenwand_00_error_colour04 *)
                        IF Outputs.Seitenwand_00_error_colour06 THEN
                            toServer.Payload[220] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[220] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_reserved_colour04 *)
                        IF Outputs.Seitenwand0_00_reserved_colour06 THEN
                            toServer.Payload[221] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[221] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_blocked_colour04 *)
                        IF Outputs.Seitenwand0_00_blocked_colour06 THEN
                            toServer.Payload[222] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[222] := 0;
                        END_IF;

                        (* BOOL Seitenwand0_00_error_colour04 *)
                        IF Outputs.Seitenwand0_00_error_colour06 THEN
                            toServer.Payload[223] := 16#FFFFFFFF;   (*BOOL *)
                        ELSE
                            toServer.Payload[223] := 0;
                        END_IF;

                        toServer.Header.SentTime := HOST_TO_BE32(in := clock.systemTime.wMilliseconds + clock.systemTime.wMinute * 60000);

                        (* send frame *)
                        fbSend(bExecute  := FALSE);
                        fbSend(sSrvNetID := '',
                               hSocket   := fbConnect.hSocket,
                               cbLen     := SIZEOF(toServer.Header) + _byteCount,(* size of header + size of user data *)
                               pSrc      := ADR(toServer),(* pointer to the frame data *)
                               bExecute  := TRUE,
                               tTimeout  := T#5s);

                        tx_state := 1;
                    END_IF
                1:(* wait until send not busy *)
                    fbSend( bExecute := FALSE );
                    IF NOT fbSend.bBusy THEN
                        tx_state := 0;
                        IF NOT fbSend.bError THEN(* no error *)
                            ;
                        ELSE(* send error => log error and disconnect *)
                            errors.Error(nErrId := fbSend.nErrId );
                            bDisconnect := TRUE;(* set flag *)
                        END_IF
                    END_IF
            END_CASE

            (* ------------------------------------------- Get/fetch rx data ----------------------------------------------------------------- *)
            CASE rx_state OF
                0:
                    IF NOT bDisconnect THEN
                        pollTimer( IN := TRUE );
                        IF pollTimer.Q THEN
                            pollTimer( IN := FALSE );

                            fbReceive( bExecute := FALSE );
                            fbReceive( 	sSrvNetId	:= '',
                            hSocket		:= fbConnect.hSocket,
                            cbLen		:= SIZEOF(fromServer) - cbReceived,
                            pDest		:= ADR(fromServer) + cbReceived,
                            bExecute	:= TRUE,
                            tTimeout	:= T#5s );
                            rx_state := 1;
                        END_IF
                    END_IF
                1:(* wait until receive not busy *)
                    fbReceive( bExecute := FALSE );
                    IF NOT fbReceive.bBusy THEN
                        rx_state := 0;
                        IF NOT fbReceive.bError THEN
                            IF fbReceive.nRecBytes > 0 THEN (* some bytes received *)

                                pollTimer( PT := T#0s );(* increase polling speed *)
                                cbReceived := cbReceived + fbReceive.nRecBytes;

                                (* parse received bytes *)
                                REPEAT
                                    bAbort := TRUE;(* set flag *)
                                    IF cbReceived >= SIZEOF(fromServer.Header) THEN (* all header bytes received => check header data *)

                                        (* correct header data *)
                                        fromServer.Header.ByteCount    := BE32_TO_HOST(fromServer.Header.ByteCount);
                                        Counter                        := fromServer.Header.Counter;
                                        fromServer.Header.SentTime     := BE32_TO_HOST(fromServer.Header.SentTime);
                                        fromServer.Header.DatagramType := BE32_TO_HOST(fromServer.Header.DatagramType);

                                        IF (fromServer.Header.ByteCount <= SIZEOF( fromServer.Payload))(* check frame (user data) length *)
                                        THEN

                                            cbRx := SIZEOF(fromServer.Header) + fromServer.Header.ByteCount;(* calculate the (expected) length of the rx frame *)
                                            IF cbReceived >= cbRx  THEN (* all frame bytes received? *)

                                               (* currently only use the data on a 32 Bit raw image *)
                                                IF fromServer.Header.DatagramType = MNG_Raw32BitImage THEN

                                                    IF 48 = (fromServer.Header.ByteCount - 4) THEN

                                                        (* BOOL Cocktail_Holder1_00_VACUUM *)
                                                        Inputs.Cocktail_Holder1_00_VACUUM := fromServer.Payload[2]<>0;

                                                        (* BOOL DetectionCookieAdapter1_00_IR *)
                                                        Inputs.DetectionCookieAdapter1_00_IR := fromServer.Payload[3]<>0;

                                                        (* BOOL Cocktail_Holder2_00_VACUUM *)
                                                        Inputs.Cocktail_Holder2_00_VACUUM := fromServer.Payload[4]<>0;

                                                        (* BOOL DetectionCookieAdapter2_00_IR *)
                                                        Inputs.DetectionCookieAdapter2_00_IR := fromServer.Payload[5]<>0;

                                                        (* BOOL Cocktail_Holder3_00_VACUUM *)
                                                        Inputs.Cocktail_Holder3_00_VACUUM := fromServer.Payload[6]<>0;

                                                        (* BOOL DetectionCookieAdapter3_00_IR *)
                                                        Inputs.DetectionCookieAdapter3_00_IR := fromServer.Payload[7]<>0;

                                                        (* BOOL Cocktail_Holder4_00_VACUUM *)
                                                        Inputs.Cocktail_Holder4_00_VACUUM := fromServer.Payload[8]<>0;

                                                        (* BOOL DetectionCookieAdapter4_00_IR *)
                                                        Inputs.DetectionCookieAdapter4_00_IR := fromServer.Payload[9]<>0;

                                                        (* BOOL Cocktail_Holder5_00_VACUUM *)
                                                        Inputs.Cocktail_Holder5_00_VACUUM := fromServer.Payload[10]<>0;

                                                        (* BOOL DetectionCookieAdapter5_00_IR *)
                                                        Inputs.DetectionCookieAdapter5_00_IR := fromServer.Payload[11]<>0;

                                                        (* BOOL Cocktail_Holder6_00_VACUUM *)
                                                        Inputs.Cocktail_Holder6_00_VACUUM := fromServer.Payload[12]<>0;

                                                        (* BOOL DetectionCookieAdapter6_00_IR *)
                                                        Inputs.DetectionCookieAdapter6_00_IR := fromServer.Payload[13]<>0;

                                                    ELSE(* receive error: invalid frame format/data *)
                                                        errors.Error(nErrId := PLCPRJ_ERROR_INVALID_IO_FORMAT_RECEIVED );
                                                    END_IF

                                                END_IF

                                                MEMMOVE( ADR( fromServer ), ADR( fromServer ) + cbRx,  cbReceived - cbRx );(* shift the remaining rx bytes *)
                                                cbReceived := cbReceived - cbRx;(* recalculate the size of the remaining rx bytes *)

                                                bAbort := FALSE;(* reset flag, try to parse next frame *)

                                                (* ELSE repeat reading *)
                                            END_IF

                                        ELSE(* receive error: invalid frame format/data *)
                                            errors.Error(nErrId := PLCPRJ_ERROR_INVALID_FRAME_FORMAT );
                                            bDisconnect := TRUE;(* set flag *)
                                        END_IF
                                        (* ELSE repeat reading *)
                                    END_IF (* IF cbReceived >= SIZEOF(rxFrame.head) THEN *)

                                UNTIL bAbort
                                END_REPEAT

                            ELSE(* fbReceive.nRecBytes = 0, repeat reading *)
                                pollTimer( PT := PLCPRJ_RECEIVER_POLLING_CYCLE_TIME );(* slow down the polling cycle *)
                            END_IF(* IF fbReceive.nRecBytes > 0 THEN *)
                        ELSE(* receive error => log error and disconnect *)
                            errors.Error(nErrId := fbReceive.nErrId );
                            bDisconnect := TRUE;(* set flag *)
                        END_IF

                    END_IF(*IF NOT fbReceive.bBusy THEN*)

            END_CASE

        END_IF

    3:(* disconnect *)
        fbConnect( bEnable:= FALSE, eState=>eState );
        IF eState = eSOCKET_DISCONNECTED THEN
            state := 0;
        END_IF

END_CASE
]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>